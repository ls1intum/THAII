name: Deploy Docker Image

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      server_image_tag:
        default: "latest"
        type: string
      client_image_tag:
        default: "latest"
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: SSH to VM and Execute Docker-Compose Down
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_DOMAIN }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_KEY }}
        proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
        proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
        proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
        proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
        script: |
          docker compose -f compose.yml --env-file=.env down --remove-orphans --rmi all

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Copy Docker Compose File From Repo to VM Host
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_DOMAIN }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_KEY }}
        proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
        proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
        proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
        proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
        source: "./compose.yml"
        target: /home/${{ secrets.SERVER_USER }}

    - name: Copy Letsencrypt File From Repo to VM Host
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_DOMAIN }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_KEY }}
        proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
        proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
        proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
        proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
        source: "./letsencrypt"
        target: /home/${{ secrets.SERVER_USER }}

    - name: Set Up Environment Variables
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_DOMAIN }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_KEY }}
        proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
        proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
        proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
        proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
        script: |
          touch .env 
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
          echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
          echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env

    - name: SSH to VM and Execute Docker-Compose Up
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_DOMAIN }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_KEY }}
        proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
        proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
        proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
        proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
        script: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} "mkdir -p ~/"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} "touch ~/letsencrypt/acme.json && chmod 600 ~/letsencrypt/acme.json"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} "docker login ghcr.io -u ${{ github.actor }} --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_DOMAIN }} "docker compose pull && docker compose up -d && docker compose logs"
